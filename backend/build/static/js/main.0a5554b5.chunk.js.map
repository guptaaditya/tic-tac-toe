{"version":3,"sources":["components/box/index.js","components/ticTacToe/index.js","components/ticTacToe/utils.js","App.js","serviceWorker.js","index.js"],"names":["Box","handleClick","bind","this","props","position","onClick","value","isDisabled","className","React","Component","defaultProps","_","noop","BoxHOC","clickHandler","TicTacToe","handleBoxClick","handleReplay","box","state","getInitialState","status","boxes","Array","fill","playTurnPlayer1","winner","setState","initState","prevState","find","row","i","ii","iii","getWinner","handleDisable","statusText","getStatusText","retryDisplayClass","App","isUserConnected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a5554b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport './box.css';\r\n\r\nexport default class Box extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        const { position, onClick, value, isDisabled } = this.props;\r\n        if (value || isDisabled) return;\r\n        onClick(position);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"box\" onClick={this.handleClick}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nBox.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    value: PropTypes.string,\r\n    position: PropTypes.number.isRequired,\r\n    isDisabled: PropTypes.bool,\r\n};\r\nBox.defaultProps = {\r\n    onClick: _.noop,\r\n    value: '',\r\n    isDisabled: false,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BoxComponent from '../box';\r\n\r\nimport './ticTacToe.css';\r\nimport { getWinner } from './utils';\r\n\r\nfunction BoxHOC(clickHandler, isDisabled = false) {\r\n    return (props) => (\r\n        <BoxComponent isDisabled={isDisabled} onClick={clickHandler} {...props} />\r\n    );\r\n}\r\n\r\nexport default class TicTacToe extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleBoxClick = this.handleBoxClick.bind(this);\r\n        this.handleReplay = this.handleReplay.bind(this);\r\n        this.box = BoxHOC(this.handleBoxClick);\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState() {\r\n        return {\r\n            status: 'waiting',\r\n            boxes: Array(9).fill(null),\r\n            playTurnPlayer1: true,\r\n            winner: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ status: 'started' }); //when player 2 joins\r\n    }\r\n\r\n    handleDisable() {\r\n        this.box = BoxHOC(this.handleBoxClick, true);\r\n    }\r\n\r\n    handleReplay() {\r\n        this.box = BoxHOC(this.handleBoxClick, false);\r\n        const initState = this.getInitialState();\r\n        initState.status = 'started';\r\n        this.setState(initState);\r\n    }\r\n\r\n    handleBoxClick(position) {\r\n        this.setState(prevState => {\r\n            const { boxes, playTurnPlayer1 } =  prevState;\r\n            boxes[position] = playTurnPlayer1 ? 'X' : 'O';\r\n            return {\r\n                boxes,\r\n                playTurnPlayer1: !playTurnPlayer1,\r\n            }\r\n        }, () => {\r\n            const winner = getWinner(this.state.boxes);\r\n            if (winner) {\r\n                this.handleDisable();\r\n                this.setState({ winner, status: 'completed' });\r\n            }\r\n        });\r\n    }\r\n\r\n    getStatusText() {\r\n        const { status, winner, playTurnPlayer1 } = this.state;\r\n        switch(status) {\r\n            case 'waiting': \r\n                return 'Waiting for another payer to join';\r\n            case 'started':\r\n                const playerName = playTurnPlayer1 ? 'Player One' : 'Player Two';\r\n                return `${playerName}: Your turn`;\r\n            break;\r\n            case 'completed':\r\n                if(winner) {\r\n                    const playerName = winner === 'X' ? 'Player One' : 'Player Two';\r\n                    return `Award goes to ${playerName}`;\r\n                }\r\n                return 'Is a Tie. You both played well.'\r\n            break;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    render() {\r\n        const Box = this.box;\r\n        const { boxes, status } = this.state;\r\n        const statusText = this.getStatusText();\r\n        const retryDisplayClass = status === 'completed' ? 'visible' : 'hidden';\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"status\">{statusText}</div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={0} value={boxes[0]} />\r\n                    <Box position={1} value={boxes[1]} />\r\n                    <Box position={2} value={boxes[2]} />\r\n                </div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={3} value={boxes[3]} />\r\n                    <Box position={4} value={boxes[4]} />\r\n                    <Box position={5} value={boxes[5]} />\r\n                </div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={6} value={boxes[6]} />\r\n                    <Box position={7} value={boxes[7]} />\r\n                    <Box position={8} value={boxes[8]} />\r\n                </div>\r\n                <div className={`retry ${retryDisplayClass}`} onClick={this.handleReplay}>\r\n                    Want to play again?\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTicTacToe.propTypes = {\r\n\r\n};\r\nTicTacToe.defaultProps = {\r\n\r\n};","import _ from 'lodash';\r\n\r\nexport function getWinner(boxes) {\r\n    const winningRows = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n\r\n      let winner = null;\r\n      _.find(winningRows, row => {\r\n        const [i, ii, iii] = row;\r\n        if (boxes[i] && boxes[ii] && boxes[i] === boxes[ii] && boxes[ii]=== boxes[iii]) {\r\n            winner = boxes[i];\r\n            return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      return winner;\r\n}","import React from 'react';\nimport './App.css';\nimport TicTacToe from './components/ticTacToe'\n\nclass App extends React.Component {\n  state = {\n    isUserConnected: false\n  };\n  \n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TicTacToe />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}