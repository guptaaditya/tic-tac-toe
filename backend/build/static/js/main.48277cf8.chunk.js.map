{"version":3,"sources":["actions/index.js","actions/actionTypes.js","liftapp/index.js","reducer/tictactoe.js","liftapp/reducer.js","sagas/index.js","liftapp/sagas.js","components/playerName/index.js","components/box/index.js","components/ticTacToe/index.js","App.js","serviceWorker.js","index.js","liftapp/store.js"],"names":["opponentJoined","type","data","youJoined","sendMessage","eventName","payload","updatedBox","turnPlayer1","boxes","status","winner","LiftApp","this","props","initSocket","children","React","Component","connect","dispatch","initialState","isServerConnected","isOpponentConnected","isPlayer1Me","player1Details","player2Details","game","playTurnPlayer1","handleServerConnectSuccess","state","action","_","defaults","handle_I_JoinedSuccess","joined","Boolean","handleOpponentJoinedSuccess","handleBoxUpdated","newGame","defaultsDeep","combineReducers","socket","tictactoe","read","write","onInitSocket","connectServer","io","window","location","protocol","hostname","Promise","resolve","on","error","console","log","subscribe","eventChannel","emit","messages","actions","forEach","msg","disconnect","call","channel","take","put","fork","sagaMiddleware","sagas","tictactoeSagas","PlayerName","name","isPlayerNameSaved","handleNameChange","bind","handleEnterGame","e","setState","target","value","trimmedName","trim","savePlayerName","alert","className","placeholder","onChange","onClick","PureComponent","Box","handleClick","position","isDisabled","defaultProps","noop","TicTacToe","handleBoxClick","handleReplay","box","clickHandler","BoxHOC","onReplay","clickedAtBoxPosition","player1Name","player2Name","playerName","statusText","getStatusText","retryDisplayClass","App","match","store","createStore","combinedReducers","compose","applyMiddleware","generatesagaMiddleware","map","saga","run","initStore","$store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48277cf8.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nexport function connectServer() {\r\n    return {\r\n        type: actionTypes.CONNECT_SERVER,\r\n    }\r\n}\r\n\r\nexport function connectServerSuccess() {\r\n    return {\r\n        type: actionTypes.CONNECT_SERVER_SUCCESS,\r\n    }\r\n}\r\n\r\nexport function savePlayerName(name) {\r\n    return sendMessage('join_game', { name })\r\n}\r\n\r\nexport function opponentJoined({ data }) {\r\n    return {\r\n        type: actionTypes.JOINED_PLAYER_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport function youJoined({ data }) {\r\n    return {\r\n        type: actionTypes.JOINED_YOUR_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport function sendMessage(eventName, payload) {\r\n    return {\r\n        type: actionTypes.SEND_MESSAGE,\r\n        eventName,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function initSocket() {\r\n    return {\r\n        type: actionTypes.INIT_SOCKET,\r\n    }\r\n}\r\n\r\nexport function clickedBox(position) {\r\n    return sendMessage('clicked_box', { position });\r\n}\r\n\r\nexport function updatedBox({ data: { turnPlayer1, boxes, status, winner } }) {\r\n    return {\r\n        type: actionTypes.UPDATED_BOX,\r\n        turnPlayer1, \r\n        boxes,\r\n        status, \r\n        winner\r\n    }\r\n}","export const CONNECT_SERVER = 'CONNECT_SERVER';\r\nexport const CONNECT_SERVER_SUCCESS = 'CONNECT_SERVER_SUCCESS';\r\nexport const SAVE_PLAYER_NAME = 'SAVE_PLAYER_NAME';\r\nexport const JOINED_PLAYER_SUCCESS = 'JOINED_PLAYER_SUCCESS';\r\nexport const JOINED_YOUR_SUCCESS = 'JOINED_YOUR_SUCCESS';\r\nexport const INIT_SOCKET = 'INIT_SOCKET';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CLICKED_BOX = 'CLICKED_BOX';\r\nexport const UPDATED_BOX = 'UPDATED_BOX';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions';\r\n\r\nclass LiftApp extends React.Component {\r\n  componentDidMount() {\r\n    this.props.initSocket();\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    (dispatch) => ({\r\n      initSocket: () => dispatch(actions.initSocket()),\r\n    })\r\n)(LiftApp);\r\n","import _ from 'lodash';\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isServerConnected: false,\r\n    isOpponentConnected: false,\r\n    isPlayer1Me: false,\r\n    player1Details: {},\r\n    player2Details: {},\r\n    game: {\r\n        status: 'started',\r\n        boxes: [],\r\n        playTurnPlayer1: true,\r\n        winner: '',\r\n    },\r\n};\r\n\r\nexport default function TicTacToe(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionTypes.CONNECT_SERVER_SUCCESS: \r\n            return handleServerConnectSuccess(state, action);\r\n        case actionTypes.JOINED_YOUR_SUCCESS:\r\n            return handle_I_JoinedSuccess(state, action);\r\n        case actionTypes.JOINED_PLAYER_SUCCESS:\r\n            return handleOpponentJoinedSuccess(state, action);\r\n        case actionTypes.UPDATED_BOX:\r\n            return handleBoxUpdated(state, action);\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nfunction handleServerConnectSuccess(state, action) {\r\n    return _.defaults({}, { isServerConnected: true }, state);\r\n}\r\n\r\nfunction handle_I_JoinedSuccess(state, action) {\r\n    const { joined, player1Details, player2Details } = action.data;\r\n    let { isPlayer1Me } = state; \r\n    if (joined === 'player1') {\r\n        isPlayer1Me = true;\r\n    }\r\n    const isOpponentConnected = Boolean(player2Details);\r\n    return _.defaults({}, { \r\n        isOpponentConnected, \r\n        player1Details, \r\n        player2Details, \r\n        isPlayer1Me \r\n    }, state);\r\n}\r\n\r\nfunction handleOpponentJoinedSuccess(state, action) {\r\n    const { joined, player1Details, player2Details } = action.data;\r\n    let { isPlayer1Me } = state; \r\n    const isOpponentConnected = true;\r\n    if (joined === 'player1') {\r\n        isPlayer1Me = false;\r\n    }\r\n\r\n    return _.defaults({}, { \r\n        isOpponentConnected, \r\n        player1Details, \r\n        player2Details, \r\n        isPlayer1Me \r\n    }, state);\r\n}\r\n\r\nfunction handleBoxUpdated(state, action) {\r\n    const { turnPlayer1: playTurnPlayer1, boxes, status, winner } = action;\r\n    const newGame = { boxes, playTurnPlayer1, status, winner };\r\n    return _.defaultsDeep({}, { 'game': newGame }, state);\r\n}","import { combineReducers } from 'redux'\r\n\r\nimport tictactoe from '../reducer/tictactoe';\r\n\r\nexport default combineReducers({\r\n  tictactoe,\r\n})","import _ from 'lodash';\r\nimport io from 'socket.io-client';\r\nimport { eventChannel } from 'redux-saga';\r\nimport { fork, put, call, take } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport * as actions from '../actions';\r\n\r\nlet socket;\r\nfunction connectServer() {\r\n    try {\r\n        const socket = io.connect(window.location.protocol+'//'+window.location.hostname);\r\n        return new Promise(resolve => {\r\n            socket.on('connect', () => {\r\n                resolve(socket);\r\n            });\r\n        });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction subscribe(socket) {\r\n    return new eventChannel(emit => {\r\n        const messages = {\r\n            'other_player_joined': actions.opponentJoined, \r\n            'you_joined': actions.youJoined,\r\n            'updated_box': actions.updatedBox,\r\n        };\r\n        _.forEach(messages, (action, msg) => {\r\n            socket.on(msg, (data) => {\r\n                emit(action({ msg, data }));\r\n            });\r\n        })\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    });\r\n}\r\n\r\nfunction* read(socket) {\r\n    const channel = yield call(subscribe, socket);\r\n    while (true) {\r\n      let action = yield take(channel);\r\n      yield put(action);\r\n    }\r\n}\r\n  \r\nfunction* write(socket) {\r\n    while (true) {\r\n        const { eventName, payload } = yield take(actionTypes.SEND_MESSAGE);\r\n        socket.emit(eventName, payload);\r\n    }\r\n}\r\n\r\nfunction* onInitSocket() {\r\n    socket = yield call(connectServer);\r\n    yield put(actions.connectServerSuccess());\r\n    yield fork(write, socket);\r\n    yield fork(read, socket);\r\n}\r\n\r\nexport default [\r\n    onInitSocket,\r\n];","import generatesagaMiddleware from 'redux-saga';\r\nimport tictactoeSagas from '../sagas';\r\n\r\nlet sagaMiddleware;\r\nconst sagas = [\r\n    ...tictactoeSagas,\r\n];\r\n\r\nexport function createSagaMiddleWare() {\r\n    sagaMiddleware = generatesagaMiddleware();\r\n    return sagaMiddleware;\r\n}\r\n\r\nexport function runSagas() {\r\n    sagas.map(saga => sagaMiddleware.run(saga));\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../actions';\r\n\r\nclass PlayerName extends React.PureComponent {\r\n    state = {\r\n        name: '',\r\n        isPlayerNameSaved: false\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleEnterGame = this.handleEnterGame.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState({ name: e.target.value });\r\n    }\r\n\r\n    handleEnterGame() {\r\n        const { name } = this.state;\r\n        const trimmedName = name.trim();\r\n        if (!trimmedName) {\r\n            alert('Please enter your display name');\r\n            return;\r\n        }\r\n        this.setState({ isPlayerNameSaved: true, name: trimmedName });\r\n        this.props.savePlayerName(trimmedName);\r\n    }\r\n\r\n    render() {\r\n        const { isPlayerNameSaved, name } = this.state;\r\n        return(\r\n            <>\r\n                {!isPlayerNameSaved && (\r\n                    <>\r\n                        <div className='input-name'>\r\n                            <input placeholder=\"Please Enter your name\" type='text' onChange={this.handleNameChange} />\r\n                        </div>\r\n                        <div className='btn-enter-game'>\r\n                            <button onClick={this.handleEnterGame}>Enter the Game</button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                {isPlayerNameSaved && (\r\n                    <div>Hi {name}, Please wait for opponent to join</div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\nPlayerName.propTypes = {\r\n    savePlayerName: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    (dispatch) => ({\r\n        savePlayerName: name => dispatch(actions.savePlayerName(name)),\r\n    })\r\n)(PlayerName);  ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport './box.css';\r\n\r\nexport default class Box extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        const { position, onClick, value, isDisabled } = this.props;\r\n        if (value || isDisabled) return;\r\n        onClick(position);\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.props;\r\n        return(\r\n            <div className={`box${value === 'X' ? ' bgyellow' : ''}`} onClick={this.handleClick}>\r\n                {value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nBox.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    value: PropTypes.string,\r\n    position: PropTypes.number.isRequired,\r\n    isDisabled: PropTypes.bool,\r\n};\r\nBox.defaultProps = {\r\n    onClick: _.noop,\r\n    value: '',\r\n    isDisabled: false,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BoxComponent from '../box';\r\n\r\nimport './ticTacToe.css';\r\n\r\nfunction BoxHOC(clickHandler, isDisabled = false) {\r\n    return (props) => (\r\n        <BoxComponent isDisabled={isDisabled} onClick={clickHandler} {...props} />\r\n    );\r\n}\r\n\r\nexport default class TicTacToe extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleBoxClick = this.handleBoxClick.bind(this);\r\n        this.handleReplay = this.handleReplay.bind(this);\r\n        this.box = BoxHOC(this.handleBoxClick);\r\n    }\r\n\r\n    handleReplay() {\r\n        this.props.onReplay();\r\n    }\r\n\r\n    handleBoxClick(position) {\r\n        this.props.clickedAtBoxPosition(position);\r\n    }\r\n\r\n    getStatusText() {\r\n        const { \r\n            game: { status, playTurnPlayer1, winner = '' }, \r\n            player1Name, player2Name, isPlayer1Me \r\n        } = this.props;\r\n        switch(status) {\r\n            case 'started':\r\n                let playerName = player2Name;\r\n                if (playTurnPlayer1) {\r\n                    if (isPlayer1Me) {\r\n                        playerName = 'Your';\r\n                    } else {\r\n                        playerName = player1Name;\r\n                    }\r\n                }\r\n                return `Its ${playerName} turn`;\r\n            case 'completed':\r\n                if(winner) {\r\n                    const playerName = winner === 'player1' ? player1Name : player2Name;\r\n                    return `Award goes to ${playerName}`;\r\n                }\r\n                return 'It is a Tie. You both played well.'\r\n            default: \r\n                return '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const Box = this.box;\r\n        const { game: { status, boxes }, player1Name, player2Name, isPlayer1Me } = this.props;\r\n        const statusText = this.getStatusText();\r\n        const retryDisplayClass = status === 'completed' ? 'visible' : 'hidden';\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"player-details\">\r\n                    {!isPlayer1Me && <div>Player 1: {player1Name} </div>}\r\n                    <div className='bgyellow'>\r\n                        {isPlayer1Me ? player1Name : player2Name}\r\n                        , you are Player \r\n                        {isPlayer1Me ? 1: 2}\r\n                    </div>\r\n                    {isPlayer1Me &&  <div>Player 2: {player2Name} </div>}\r\n                </div>\r\n                <div className=\"status\">{statusText}</div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={0} value={boxes[0]} />\r\n                    <Box position={1} value={boxes[1]} />\r\n                    <Box position={2} value={boxes[2]} />\r\n                </div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={3} value={boxes[3]} />\r\n                    <Box position={4} value={boxes[4]} />\r\n                    <Box position={5} value={boxes[5]} />\r\n                </div>\r\n                <div className=\"box-lane\">\r\n                    <Box position={6} value={boxes[6]} />\r\n                    <Box position={7} value={boxes[7]} />\r\n                    <Box position={8} value={boxes[8]} />\r\n                </div>\r\n                <div className={`retry ${retryDisplayClass}`} onClick={this.handleReplay}>\r\n                    Want to play again?\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTicTacToe.propTypes = {\r\n    isPlayer1Me: PropTypes.bool.isRequired,\r\n    clickedAtBoxPosition: PropTypes.func.isRequired,\r\n    game: PropTypes.shape({\r\n        status: PropTypes.string, \r\n        playTurnPlayer1: PropTypes.bool, \r\n        winner: PropTypes.string, \r\n        boxes: PropTypes.array \r\n    }),\r\n    player1Name: PropTypes.string,\r\n    player2Name: PropTypes.string,\r\n    onReplay: PropTypes.func.isRequired,\r\n};","import React from 'react';\nimport PlayerName from './components/playerName';\nimport './App.css';\nimport TicTacToe from './components/ticTacToe'\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends React.Component {\n  render() {\n    const { \n      isServerConnected, isOpponentConnected, game, handleBoxClick, isPlayer1Me ,\n      player1Name, player2Name, handleReplay\n    } = this.props;\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!isServerConnected && <div className='loading'>Connecting server...</div>}\n          {isServerConnected && !isOpponentConnected && (\n            <PlayerName />\n          )}\n          {isOpponentConnected && (\n            <TicTacToe \n              game={game} \n              clickedAtBoxPosition={handleBoxClick} \n              isPlayer1Me={isPlayer1Me} \n              player1Name={player1Name}\n              player2Name={player2Name}\n              onReplay={handleReplay}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    isServerConnected: state.tictactoe.isServerConnected,\n    isOpponentConnected: state.tictactoe.isOpponentConnected,\n    isPlayer1Me: state.tictactoe.isPlayer1Me,\n    game: state.tictactoe.game,\n    player1Name: state.tictactoe.player1Details.name,\n    player2Name: state.tictactoe.player2Details.name,\n  }),\n  (dispatch) => ({\n    handleReplay: () => dispatch(actions.sendMessage('restart_game')),\n    handleBoxClick: (position) => dispatch(actions.clickedBox(position)),\n  })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport LiftApp from './liftapp';\nimport initStore from './liftapp/store.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst store = initStore();\nwindow.$store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <LiftApp>\n        <App />\n      </LiftApp>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport combinedReducers from './reducer';\r\nimport { createSagaMiddleWare, runSagas } from './sagas';\r\n\r\n\r\nexport default function initStore() {\r\n    const store = createStore(\r\n        combinedReducers,\r\n        compose(\r\n            applyMiddleware(createSagaMiddleWare())\r\n        )\r\n    );\r\n    runSagas();\r\n    return store;\r\n}"],"sourceRoot":""}